generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  name        String
  email       String      @unique
  passwordHash String?    @map("password_hash")
  timezone    String
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  payments    Payment[]
  categories  Category[]
  reminder    Reminder?
  notifications Notification[]

  subscription Subscription?
}

model Category {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  name      String
  color     String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments  Payment[]
}

model Payment {
  id             String    @id @default(uuid())
  userId         String    @map("user_id")
  categoryId     String?   @map("category_id")
  title          String
  amount         Decimal   @db.Decimal(10, 2)
  dueDate        DateTime  @map("due_date")
  status         String
  notes          String?
  isRecurring    Boolean   @default(false) @map("is_recurring")
  recurrenceRule String?   @map("recurrence_rule")
  nextDueDate    DateTime? @map("next_due_date")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category? @relation(fields: [categoryId], references: [id])
  notifications Notification[]
}

model Reminder {
  id         String   @id @default(uuid())
  userId     String   @unique @map("user_id")
  daysBefore Int      @map("days_before")
  hour       DateTime
  viaEmail   Boolean  @default(true) @map("via_email")
  viaPush    Boolean  @default(false) @map("via_push")
  viaWhatsapp Boolean @default(false) @map("via_whatsapp")
  active     Boolean  @default(true)

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  paymentId    String   @map("payment_id")
  channel      String
  status       String
  sentAt       DateTime @map("sent_at")
  errorMessage String?  @map("error_message")

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model Subscription {
  id         String   @id @default(uuid())
  userId     String   @unique @map("user_id")
  plan       String
  stripeId   String   @map("stripe_id")
  status     String
  renewsAt   DateTime @map("renews_at")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
